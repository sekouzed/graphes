<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox6.Text" xml:space="preserve">
    <value>
Dans ce projet de théorie des graphes, nous présentons une application desktop que nous avons développée à bases des notions appris en cours.
Pour concrétiser notre projet, nous avons décider de mettre en place un système de d’itinéraire à
travers une carte afin de permettre les touristes, voyageurs désirant parcourir plusieurs pays, de mieux
optimiser leur chemin. Cette application pourra servir dans plusieurs autres domaine que celui ci.
Cette application permet de faire la représentation d’un graphe orienté et non orienté, ainsi que se
compose des fonctionnalités et algorithmes suivantes :
– Ajouter des Noeuds
– Supprimer des Noeuds
– Lier les Noeuds
– Générer la Matrice adjacente
– Donner Liste adjacent
– Modifier le graphe
– Enregistrer le graphe
– Ouvrir un graphe existant
– Faire le parcours en profondeur (algorithme Depth First Search)
– Faire le parcours en largeur (algorithme Breadth First Search)
– Faire une fermeture transitive (algorithme de Warshall)
– Trouver le chemin le plus cours entre deux Noeud (algorithme Dijkstra)
– Générer en détail un rapport général sur le graphe.

Ce projet a été réaliser par:

 DIOUBATE SEKOU et SANY ABDOUGUAFAROU,
 etudiants en LSI :Logicel et Systeme Informatique, Faculté des sciences technique de Tanger</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>Représentation du graphe
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
 Cette application permet de faire la représentation d’un graphe orienté et non orienté à travers les fonctions d’ajout et suppression des Noeuds ainsi que la
fonction de liaison pour faire, suivant l’orientabilité du graphe, un arc ou une arête entre les Noeuds.

Pour faire un nouveau graphe, on procède comme suit :

– Fichier =&gt; Nouveau (raccourci clavier : control + N) ;
– Selectionner le type de graphe(graphe orienté ou graphe non orienté) dans la boite de dialogue
apparaissant ;
– Cocher si avec ou sans carte dans la même boite de dialogue apparaissant ;
– puis OK pour commencer ;
Le curseurs vous donne la main pour placer les Noeuds :
– Click gauche dans l’espace de traçasse pour placer des noeuds (autant de noeuds souhaités) ;
– Click droite pour finir, et le curseur redevient à son état initial, une flèche.</value>
  </data>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>Modification
''''''''''''''''''''''''''''''
Une fois le graphe élaboré et tracé, on pourra le modifier par les fonctions d’ajouter, de suppression
et de liaison, mais aussi déplacer ces noeuds et les ajuster.

Pour ajouter des noeuds :

– Edition =&gt; Ajouter des noeuds ;
– Click gauche dans l’espace de tracasse pour placer des noeuds (autant de noeuds souhaités) ;
– Click droite pour finir.

Pour supprimer des noeuds :

– Edition =&gt; Enlever les Noeuds ;
– Cocher le numéro des noeuds à supprimer, puis OK.

Pour faire des liaisons :

– Edition =&gt; lier les Noeuds;
– Cliquer dans un noeud de départ puis dans un noeud d’arrivé.
– Taper ensuite le cout de la liaison dans la boite de dialogue apparaissant. Avec la possibilité de
faire autant de liaisons souhaitées ;


Modification avec la matrice d’adjacence

On a également la possibilité d’utiliser la matrice d’adjacence pour faire des modifications dans
la structure du graphe. Pour se faire, il suffit de changer les valeurs et les champs des couts de la liaison
dans la matrice.
– Cliquer sur le bouton terminer pour finir.
Pour déplacer un noeud :
– Cliquer sur le noeud à déplacer puis sur le nouvel emplacement souhaiter dans l’espace de
traçasse.</value>
  </data>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>Sauvegarde et ouverture d’un graphe existant
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Par un sérialisation de type binaire, on pourra enregistrer le graphe ainsi qu’avec tous ses variables,
y compris sa matrice d’adjacence, dans un fichier sous format .bin. Ce travail pour être ouvert lors
d’une exécution ultérieure par une procédure inverse qui est la desérialisation.

On procède ainsi :

– Fichier =&gt; Ouvrir (raccourci clavier : control + O)
– Fichier =&gt; Enregistrer (raccourci clavier : control + S)</value>
  </data>
  <data name="richTextBox4.Text" xml:space="preserve">
    <value>Les fonctions d’outils :
'''''''''''''''''''''''''''''''''''''
Elles constituent l’exécution des différents algorithme du cours.

Pour en exécuter une :

– Outil =&gt; parcours, puis choisir le Noeud de départ.
– Outil =&gt; fermeture transitive
– Outil =&gt; chemin optimal, choisir le noeud de départ et d’arrivé.</value>
  </data>
  <data name="richTextBox5.Text" xml:space="preserve">
    <value>Autres fonctionnalités
'''''''''''''''''''''''''''''''''''
Avant de boucler cette partie, nous tenons à signaler d’autres fonctions , à savoir :

– Le menu contextuel : 
En plus des raccourcis clavier, l’application possède un menu contextuel
qui permet d’accéder plus facilement aux différents fonctionnalités du programme.

– La barre latéral des arrête :
 Elle s’interprète ainsi (noeud A , noeud B) = cout de A à B

– La liste d’adjacence : 
Elle permet de visionner pour un noeud donné, toutes les liaisons entrantes
et sortant de ce noeud.

– Rapport : 
Elle donne tous les renseignement sur le graphe, à savoir : la taille du graphe, la
matrice, la liste et les résultats des différents algorithmes appliqués au graphe.</value>
  </data>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>31</value>
  </metadata>
</root>